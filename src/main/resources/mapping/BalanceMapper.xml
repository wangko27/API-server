<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="io.nuls.api.server.dao.mapper.BalanceMapper" >
  <resultMap id="BaseResultMap" type="io.nuls.api.entity.Balance" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="address" property="address" jdbcType="VARCHAR" />
    <result column="locked" property="locked" jdbcType="BIGINT" />
    <result column="usable" property="usable" jdbcType="BIGINT" />
    <result column="block_height" property="blockHeight" jdbcType="BIGINT" />
    <result column="assets_code" property="assetsCode" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, address, locked, usable, block_height, assets_code
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from balance
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from balance
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="io.nuls.api.entity.Balance" >
    insert into balance (id, address, locked, 
      usable, block_height, assets_code
      )
    values (#{id,jdbcType=BIGINT}, #{address,jdbcType=VARCHAR}, #{locked,jdbcType=BIGINT}, 
      #{usable,jdbcType=BIGINT}, #{blockHeight,jdbcType=BIGINT}, #{assetsCode,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="io.nuls.api.entity.Balance" >
    insert into balance
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="address != null" >
        address,
      </if>
      <if test="locked != null" >
        locked,
      </if>
      <if test="usable != null" >
        usable,
      </if>
      <if test="blockHeight != null" >
        block_height,
      </if>
      <if test="assetsCode != null" >
        assets_code,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="address != null" >
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="locked != null" >
        #{locked,jdbcType=BIGINT},
      </if>
      <if test="usable != null" >
        #{usable,jdbcType=BIGINT},
      </if>
      <if test="blockHeight != null" >
        #{blockHeight,jdbcType=BIGINT},
      </if>
      <if test="assetsCode != null" >
        #{assetsCode,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="io.nuls.api.entity.Balance" >
    update balance
    <set >
      <if test="address != null" >
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="locked != null" >
        locked = #{locked,jdbcType=BIGINT},
      </if>
      <if test="usable != null" >
        usable = #{usable,jdbcType=BIGINT},
      </if>
      <if test="blockHeight != null" >
        block_height = #{blockHeight,jdbcType=BIGINT},
      </if>
      <if test="assetsCode != null" >
        assets_code = #{assetsCode,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="io.nuls.api.entity.Balance" >
    update balance
    set address = #{address,jdbcType=VARCHAR},
      locked = #{locked,jdbcType=BIGINT},
      usable = #{usable,jdbcType=BIGINT},
      block_height = #{blockHeight,jdbcType=BIGINT},
      assets_code = #{assetsCode,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectBySearchable" parameterType="io.nuls.api.server.dao.util.Searchable" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from balance
    <include refid="io.nuls.api.server.dao.mapper.CommonMapper.Search_Where"/>
  </select>
  <select id="selectList" parameterType="io.nuls.api.server.dao.util.Searchable" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from balance
    <include refid="io.nuls.api.server.dao.mapper.CommonMapper.Search_Where"/>
  </select>
</mapper>